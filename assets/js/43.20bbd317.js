(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{442:function(t,e,s){"use strict";s.r(e);var a=s(13),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"running-sanic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-sanic"}},[t._v("#")]),t._v(" Running Sanic")]),t._v(" "),s("p",[t._v("Sanic ships with its own internal web server. Under most circumstances, this is the preferred method for deployment. In addition, you can also deploy Sanic as an ASGI app bundled with an ASGI-able web server, or using gunicorn.")]),t._v(" "),s("h2",{attrs:{id:"sanic-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sanic-server"}},[t._v("#")]),t._v(" Sanic Server")]),t._v(" "),s("p",[t._v("After defining an instance of "),s("code",[t._v("sanic.Sanic")]),t._v(", we can call the run method with the following keyword arguments:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("Parameter")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("host")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v('"127.0.0.1"')])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Address to host the server on.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("port")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("8000")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Port to host the server on.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("unix")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("None")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Unix socket name to host the server on (instead of TCP).")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("debug")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("False")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Enables debug output (slows server).")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("ssl")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("None")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("SSLContext for SSL encryption of worker(s).")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("sock")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("None")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Socket for the server to accept connections from.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("workers")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("1")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Number of worker processes to spawn.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("loop")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("None")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("An asyncio-compatible event loop. If none is specified, Sanic creates its own event loop.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("protocol")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("HttpProtocol")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Subclass of asyncio.protocol.")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("access_log")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("True")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Enables log on handling requests (significantly slows server).")])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("In the above example, we decided to turn off the access log in order to increase performance.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server.py")]),t._v("\napp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sanic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My App"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("Now, just execute the python script that has "),s("code",[t._v("app.run(...)")])])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("python server.py\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"workers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workers"}},[t._v("#")]),t._v(" Workers")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("By default, Sanic listens in the main process using only one CPU core. To crank up the juice, just specify the number of workers in the run arguments.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Sanic will automatically spin up multiple processes and route traffic between them. We recommend as many workers as you have available processors.")]),t._v(" "),s("p",[t._v("A common way to check this on Linux based operating systems:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ nproc\n")])])]),s("p",[t._v("Or, let Python do it:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" multiprocessing\nworkers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" multiprocessing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpu_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("workers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"running-via-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-via-command"}},[t._v("#")]),t._v(" Running via command")]),t._v(" "),s("h4",{attrs:{id:"sanic-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sanic-cli"}},[t._v("#")]),t._v(" Sanic CLI")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("Sanic also has a simple CLI to launch via command line.")]),t._v(" "),s("p",[t._v("For example, if you initialized Sanic as app in a file named "),s("code",[t._v("server.py")]),t._v(", you could run the server like so:")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sanic server.app --host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 --port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" --workers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("Use "),s("code",[t._v("sanic --help")]),t._v(" to see all the options.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ sanic --help\nusage: sanic "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--host HOST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--port PORT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--unix UNIX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--cert CERT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--key KEY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--workers WORKERS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" module\n\npositional arguments:\n  module\n\noptional arguments:\n  -h, --help         show this "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" message and "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v("\n  --host HOST\n  --port PORT\n  --unix UNIX\n  --cert CERT        location of certificate "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" SSL\n  --key KEY          location of keyfile "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" SSL.\n  --workers WORKERS\n  --debug\n\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"as-a-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#as-a-module"}},[t._v("#")]),t._v(" As a module")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("It can also be called directly as a module.")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("python -m sanic server.app --host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0 --port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v(" --workers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("FYI")]),t._v(" "),s("p",[t._v("With either method (CLI or module), it is not necessary to invoke "),s("code",[t._v("app.run()")]),t._v(" in your Python file. If you do, make sure you wrap it so that it only executes when directly run by the interpreter.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"asgi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#asgi"}},[t._v("#")]),t._v(" ASGI")]),t._v(" "),s("p",[t._v("Sanic is also ASGI-compliant. This means you can use your preferred ASGI webserver to run Sanic. The three main implementations of ASGI are "),s("a",{attrs:{href:"http://github.com/django/daphne",target:"_blank",rel:"noopener noreferrer"}},[t._v("Daphne"),s("OutboundLink")],1),t._v(", "),s("a",{attrs:{href:"https://www.uvicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Uvicorn"),s("OutboundLink")],1),t._v(", and "),s("a",{attrs:{href:"https://pgjones.gitlab.io/hypercorn/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hypercorn"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Follow their documentation for the proper way to run them, but it should look something like:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("daphne myapp:app\nuvicorn myapp:app\nhypercorn myapp:app\n")])])]),s("p",[t._v("A couple things to note when using ASGI:")]),t._v(" "),s("ol",[s("li",[t._v("When using the Sanic webserver, websockets will run using the "),s("code",[t._v("websockets")]),t._v(" package. In ASGI mode, there is no need for this package since websockets are managed in the ASGI server.")]),t._v(" "),s("li",[t._v("The ASGI lifespan protocol "),s("a",{attrs:{href:"https://asgi.readthedocs.io/en/latest/specs/lifespan.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://asgi.readthedocs.io/en/latest/specs/lifespan.html"),s("OutboundLink")],1),t._v(", supports only two server events: startup and shutdown. Sanic has four: before startup, after startup, before shutdown, and after shutdown. Therefore, in ASGI mode, the startup and shutdown events will run consecutively and not actually around the server process beginning and ending (since that is now controlled by the ASGI server). Therefore, it is best to use "),s("code",[t._v("after_server_start")]),t._v(" and "),s("code",[t._v("before_server_stop")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"trio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trio"}},[t._v("#")]),t._v(" Trio")]),t._v(" "),s("p",[t._v("Sanic has experimental support for running on Trio with:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("hypercorn -k trio myapp:app\n")])])]),s("h2",{attrs:{id:"gunicorn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gunicorn"}},[t._v("#")]),t._v(" Gunicorn")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://gunicorn.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn"),s("OutboundLink")],1),t._v(' ("Green Unicorn") is a WSGI HTTP Server for UNIX based operating systems. It is a pre-fork worker model ported from Ruby’s Unicorn project.')]),t._v(" "),s("p",[t._v("In order to run Sanic application with Gunicorn, you need to use the special "),s("code",[t._v("sanic.worker.GunicornWorker")]),t._v(" for Gunicorn worker-class argument:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("gunicorn myapp:app --bind "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:1337 --worker-class sanic.worker.GunicornWorker\n")])])]),s("p",[t._v("If your application suffers from memory leaks, you can configure Gunicorn to gracefully restart a worker after it has processed a given number of requests. This can be a convenient way to help limit the effects of the memory leak.")]),t._v(" "),s("p",[t._v("See the "),s("a",{attrs:{href:"http://docs.gunicorn.org/en/latest/settings.html#max-requests",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gunicorn Docs"),s("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("When running Sanic via "),s("code",[t._v("gunicorn")]),t._v(", you are losing out on a lot of the performance benefits of "),s("code",[t._v("async")]),t._v("/"),s("code",[t._v("await")]),t._v(". Weigh your considerations carefully before making this choice. Gunicorn does provide a lot of configuration options, but it is not the best choice for getting Sanic to run at its fastest.")])]),t._v(" "),s("h2",{attrs:{id:"performance-considerations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performance-considerations"}},[t._v("#")]),t._v(" Performance considerations")]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("When running in production, make sure you turn off "),s("code",[t._v("debug")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" debug"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),s("div",{staticClass:"multicolumn",staticStyle:{display:"flex","flex-direction":"row","align-items":"flex-start"}},[s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("p",[t._v("Sanic will also perform fastest if you turn off "),s("code",[t._v("access_log")]),t._v(".")]),t._v(" "),s("p",[t._v("If you still require access logs, but want to enjoy this performance boost, consider using "),s("RouterLink",{attrs:{to:"/en/guide/deployment/nginx.html"}},[t._v("Nginx as a proxy")]),t._v(", and letting that handle your access logging. It will be much faster than anything Python can handle.")],1)]),t._v(" "),s("div",{staticClass:"multicolumn-column",staticStyle:{"flex-grow":"1","flex-basis":"0"}},[s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" access_log"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);